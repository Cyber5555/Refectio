{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nexport default function createNumberMask(props) {\n  var _ref = props || {},\n      _ref$delimiter = _ref.delimiter,\n      delimiter = _ref$delimiter === void 0 ? '.' : _ref$delimiter,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? [] : _ref$prefix,\n      _ref$separator = _ref.separator,\n      separator = _ref$separator === void 0 ? ',' : _ref$separator;\n\n  return function (value) {\n    var numericValue = (value === null || value === void 0 ? void 0 : value.replace(/\\D+/g, '')) || '';\n    var mask = numericValue.split('').map(function () {\n      return /\\d/;\n    });\n    var shouldAddSeparatorOnMask = precision > 0 && !!separator;\n\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n\n    var amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n    if (delimiter) {\n      for (var i = 0; i < amountOfDelimiters; i++) {\n        var precisionOffset = precision;\n        var separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        var thousandOffset = 3 + (delimiter ? 1 : 0);\n        var delimiterPosition = -precisionOffset - separatorOffset - i * thousandOffset - 3;\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n\n    return [].concat(_toConsumableArray(prefix), _toConsumableArray(mask));\n  };\n}","map":{"version":3,"mappings":";AAKA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAA+D;EAC5E,WAAyEA,KAAK,IAAI,EAAlF;EAAA,0BAAQC,SAAR;EAAA,IAAQA,SAAR,+BAAoB,GAApB;EAAA,0BAAyBC,SAAzB;EAAA,IAAyBA,SAAzB,+BAAqC,CAArC;EAAA,uBAAwCC,MAAxC;EAAA,IAAwCA,MAAxC,4BAAiD,EAAjD;EAAA,0BAAqDC,SAArD;EAAA,IAAqDA,SAArD,+BAAiE,GAAjE;;EAEA,OAAQC,eAAD,EAAoB;IACzB,IAAMC,YAAY,GAAG,MAAK,SAALD,SAAK,WAALA,iBAAK,CAAEE,OAAPF,CAAe,MAAfA,EAAuB,EAAvBA,MAA8B,EAAnD;IAEA,IAAIG,IAAe,GAAGF,YAAY,CAACG,KAAbH,CAAmB,EAAnBA,EAAuBI,GAAvBJ,CAA2B;MAAA,OAAM,IAAN;IAAA,CAA3BA,CAAtB;IAEA,IAAMK,wBAAwB,GAAGT,SAAS,GAAG,CAAZA,IAAiB,CAAC,CAACE,SAApD;;IAEA,IAAII,IAAI,CAACI,MAALJ,GAAcN,SAAdM,IAA2BG,wBAA/B,EAAyD;MACvDH,IAAI,CAACK,MAALL,CAAY,CAACN,SAAbM,EAAwB,CAAxBA,EAA2BJ,SAA3BI;IACD;;IAED,IAAMM,kBAAkB,GAAGC,IAAI,CAACC,IAALD,CAAU,CAACT,YAAY,CAACM,MAAbN,GAAsBJ,SAAvB,IAAoC,CAA9Ca,IAAmD,CAA9E;;IAEA,IAAId,SAAJ,EAAe;MACb,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAApB,EAAwCG,CAAC,EAAzC,EAA6C;QAC3C,IAAMC,eAAe,GAAGhB,SAAxB;QACA,IAAMiB,eAAe,GAAGR,wBAAwB,GAAG,CAAH,GAAO,CAAvD;QACA,IAAMS,cAAc,GAAG,KAAKnB,SAAS,GAAG,CAAH,GAAO,CAArB,CAAvB;QACA,IAAMoB,iBAAiB,GACrB,CAACH,eAAD,GAAmBC,eAAnB,GAAqCF,CAAC,GAAGG,cAAzC,GAA0D,CAD5D;QAGAZ,IAAI,CAACK,MAALL,CAAYa,iBAAZb,EAA+B,CAA/BA,EAAkCP,SAAlCO;MACD;IACF;;IAED,oCAAWL,MAAX,sBAAsBK,IAAtB;EAzBF;AA2BD","names":["createNumberMask","props","delimiter","precision","prefix","separator","value","numericValue","replace","mask","split","map","shouldAddSeparatorOnMask","length","splice","amountOfDelimiters","Math","ceil","i","precisionOffset","separatorOffset","thousandOffset","delimiterPosition"],"sources":["createNumberMask.ts"],"sourcesContent":["import type { MaskArray } from './formatWithMask.types';\n\nimport type { Mask } from './formatWithMask.types';\nimport type { CreateNumberMaskProps } from './createNumberMask.types';\n\nexport default function createNumberMask(props?: CreateNumberMaskProps): Mask {\n  const { delimiter = '.', precision = 2, prefix = [], separator = ',' } = props || {};\n\n  return (value?: string) => {\n    const numericValue = value?.replace(/\\D+/g, '') || '';\n\n    let mask: MaskArray = numericValue.split('').map(() => /\\d/);\n\n    const shouldAddSeparatorOnMask = precision > 0 && !!separator;\n\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n\n    const amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n    if (delimiter) {\n      for (let i = 0; i < amountOfDelimiters; i++) {\n        const precisionOffset = precision;\n        const separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        const thousandOffset = 3 + (delimiter ? 1 : 0);\n        const delimiterPosition =\n          -precisionOffset - separatorOffset - i * thousandOffset - 3;\n\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n\n    return [...prefix, ...mask];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}