{"ast":null,"code":"import createNumberMask from \"./createNumberMask\";\nvar BRL_CAR_PLATE = [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/, '-', /\\d/, /\\w/, /\\d/, /\\d/];\nvar BRL_CNPJ = [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\nvar BRL_CPF = [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n\nvar BRL_CPF_CNPJ = function BRL_CPF_CNPJ(text) {\n  var rawValue = (text === null || text === void 0 ? void 0 : text.replace(/\\D+/g, '')) || '';\n  return rawValue.length <= 11 ? BRL_CPF : BRL_CNPJ;\n};\n\nvar BRL_CURRENCY = createNumberMask({\n  prefix: ['R', '$', ' '],\n  separator: ',',\n  delimiter: '.',\n  precision: 2\n});\nvar USA_PHONE = [\"(\", /[2-9]/, /\\d/, /\\d/, ')', ' ', /[2-9]/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\nvar BRL_PHONE = ['(', /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\nvar CREDIT_CARD = [/\\d/, /\\d/, /\\d/, /\\d/, ' ', [/\\d/], [/\\d/], [/\\d/], [/\\d/], ' ', [/\\d/], [/\\d/], [/\\d/], [/\\d/], ' ', /\\d/, /\\d/, /\\d/, /\\d/];\n\nvar DATE_DDMMYYYY = function DATE_DDMMYYYY() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cleanText = text.replace(/\\D+/g, '');\n  var secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(0) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  var secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(2) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  return [/[0-3]/, secondDigitDayMask, '/', /[0-1]/, secondDigitMonthMask, '/', /\\d/, /\\d/, /\\d/, /\\d/];\n};\n\nvar DATE_MMDDYYYY = function DATE_MMDDYYYY() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cleanText = text.replace(/\\D+/g, '');\n  var secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(0) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  var secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(2) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [/[0-1]/, secondDigitMonthMask, '/', /[0-3]/, secondDigitDayMask, '/', /\\d/, /\\d/, /\\d/, /\\d/];\n};\n\nvar DATE_YYYYMMDD = function DATE_YYYYMMDD() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cleanText = text.replace(/\\D+/g, '');\n  var secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(4) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(4) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  var secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(6) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(6) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [/\\d/, /\\d/, /\\d/, /\\d/, '/', /[0-1]/, secondDigitMonthMask, '/', /[0-3]/, secondDigitDayMask];\n};\n\nvar ZIP_CODE = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/];\nexport default {\n  BRL_CAR_PLATE: BRL_CAR_PLATE,\n  BRL_CNPJ: BRL_CNPJ,\n  BRL_CPF: BRL_CPF,\n  BRL_CPF_CNPJ: BRL_CPF_CNPJ,\n  BRL_CURRENCY: BRL_CURRENCY,\n  BRL_PHONE: BRL_PHONE,\n  USA_PHONE: USA_PHONE,\n  CREDIT_CARD: CREDIT_CARD,\n  DATE_DDMMYYYY: DATE_DDMMYYYY,\n  DATE_MMDDYYYY: DATE_MMDDYYYY,\n  DATE_YYYYMMDD: DATE_YYYYMMDD,\n  ZIP_CODE: ZIP_CODE\n};","map":{"version":3,"mappings":"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","names":["createNumberMask","BRL_CAR_PLATE","BRL_CNPJ","BRL_CPF","BRL_CPF_CNPJ","text","rawValue","replace","length","BRL_CURRENCY","prefix","separator","delimiter","precision","USA_PHONE","BRL_PHONE","CREDIT_CARD","DATE_DDMMYYYY","cleanText","secondDigitDayMask","charAt","secondDigitMonthMask","DATE_MMDDYYYY","DATE_YYYYMMDD","ZIP_CODE"],"sources":["Masks.ts"],"sourcesContent":["import createNumberMask from './createNumberMask';\nimport type { Mask, MaskArray } from './formatWithMask.types';\n\nconst BRL_CAR_PLATE = [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/, '-', /\\d/, /\\w/, /\\d/, /\\d/];\n\nconst BRL_CNPJ = [\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '/',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n];\n\nconst BRL_CPF = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n];\n\nconst BRL_CPF_CNPJ = (text?: string) => {\n  const rawValue = text?.replace(/\\D+/g, '') || '';\n  return rawValue.length <= 11 ? BRL_CPF : BRL_CNPJ;\n};\n\nconst BRL_CURRENCY = createNumberMask({\n  prefix: ['R', '$', ' '],\n  separator: ',',\n  delimiter: '.',\n  precision: 2,\n});\n\nconst USA_PHONE = [\n  `(`,\n  /[2-9]/,\n  /\\d/,\n  /\\d/,\n  ')',\n  ' ',\n  /[2-9]/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n];\n\nconst BRL_PHONE = [\n  '(',\n  /\\d/,\n  /\\d/,\n  ')',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n];\n\nconst CREDIT_CARD = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  ' ',\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  ' ',\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n] as MaskArray;\n\nconst DATE_DDMMYYYY: Mask = (text = '') => {\n  const cleanText = text.replace(/\\D+/g, '');\n\n  let secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n  if (cleanText.charAt(0) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  let secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n  if (cleanText.charAt(2) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  return [\n    /[0-3]/,\n    secondDigitDayMask,\n    '/',\n    /[0-1]/,\n    secondDigitMonthMask,\n    '/',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n  ];\n};\n\nconst DATE_MMDDYYYY: Mask = (text = '') => {\n  const cleanText = text.replace(/\\D+/g, '');\n\n  let secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n  if (cleanText.charAt(0) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  let secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n  if (cleanText.charAt(2) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [\n    /[0-1]/,\n    secondDigitMonthMask,\n    '/',\n    /[0-3]/,\n    secondDigitDayMask,\n    '/',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n  ];\n};\n\nconst DATE_YYYYMMDD: Mask = (text = '') => {\n  const cleanText = text.replace(/\\D+/g, '');\n\n  let secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(4) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n  if (cleanText.charAt(4) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  let secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(6) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n  if (cleanText.charAt(6) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    '/',\n    /[0-1]/,\n    secondDigitMonthMask,\n    '/',\n    /[0-3]/,\n    secondDigitDayMask,\n  ];\n};\n\nconst ZIP_CODE = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/];\n\nexport default {\n  BRL_CAR_PLATE,\n  BRL_CNPJ,\n  BRL_CPF,\n  BRL_CPF_CNPJ,\n  BRL_CURRENCY,\n  BRL_PHONE,\n  USA_PHONE,\n  CREDIT_CARD,\n  DATE_DDMMYYYY,\n  DATE_MMDDYYYY,\n  DATE_YYYYMMDD,\n  ZIP_CODE,\n};\n"]},"metadata":{},"sourceType":"module"}